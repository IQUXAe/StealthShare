# StealthShare v0.1 pre1
# Copyright (c) 2025 IQUXAe
# Released under the MIT License. See LICENSE file for details.

import os
import logging
import sys
import locale 

logger = logging.getLogger("StealthShareApp")

FILE_CATEGORIES = {
    "Images": ['.jpg', '.jpeg', '.png', '.tiff', '.tif', '.gif', '.webp', '.bmp'],
    "Documents": ['.docx', '.xlsx', '.pptx'],
    "PDF": ['.pdf']
}

LANGUAGES = {
    "ru": {
        "app_title_suffix": "–û—á–∏—Å—Ç–∫–∞ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö",
        "author_credit": "–†–∞–∑—Ä–∞–±–æ—Ç–∞–Ω–æ IQUXAe",
        "status_ready": "–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ",
        "options_title": "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—á–∏—Å—Ç–∫–∏",
        "profile_label": "–ü—Ä–æ—Ñ–∏–ª—å –æ—á–∏—Å—Ç–∫–∏:",
        "preserve_icc_label": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å ICC –ø—Ä–æ—Ñ–∏–ª—å (–¥–ª—è —Ü–≤–µ—Ç–∞)",
        "sort_by_type_label": "–†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ –ø–∞–ø–∫–∞–º –≤—ã–≤–æ–¥–∞",
        "info_title": "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
        "supported_ext_label": "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è:",
        "file_handling_title": "–§–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏",
        "drop_target_label": "–î–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –∫–Ω–æ–ø–∫–æ–π:", 
        "add_files_button": "–î–æ–±–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã...",
        "clear_list_button": "–û—á–∏—Å—Ç–∏—Ç—å —Å–ø–∏—Å–æ–∫",
        "output_dir_label": "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤:",
        "browse_button": "–û–±–∑–æ—Ä...",
        "start_button": "üöÄ –ù–∞—á–∞—Ç—å –æ—á–∏—Å—Ç–∫—É",
        "processing_button": "‚è≥ –û–±—Ä–∞–±–æ—Ç–∫–∞...",
        "status_files_added": "–î–æ–±–∞–≤–ª–µ–Ω–æ {count} —Ñ–∞–π–ª–æ–≤. –í—Å–µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ: {total}.",
        "status_files_not_added": "–ù–æ–≤—ã–µ —Ñ–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–≤–æ–∑–º–æ–∂–Ω–æ, —É–∂–µ –≤ —Å–ø–∏—Å–∫–µ).",
        "status_list_cleared": "–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω.",
        "status_output_dir_selected": "–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {folder}",
        "status_processing_start": "–ù–∞—á–∞—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ {count} —Ñ–∞–π–ª–æ–≤...",
        "status_processing_file": "–û–±—Ä–∞–±–æ—Ç–∫–∞ ({current}/{total}): {filename}...",
        "status_completed_summary": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count} –∏–∑ {total_files}.",
        "status_completed_with_errors": "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {success_count} –∏–∑ {total_files}. –û—à–∏–±–æ–∫: {error_count}.",
        "status_no_files_to_process": "–§–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ –±—ã–ª–∏ –≤—ã–±—Ä–∞–Ω—ã.",
        "dialog_no_files_title": "–§–∞–π–ª—ã –Ω–µ –≤—ã–±—Ä–∞–Ω—ã",
        "dialog_no_files_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤ —Å–ø–∏—Å–æ–∫.",
        "dialog_no_output_dir_title": "–ü–∞–ø–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞",
        "dialog_no_output_dir_message": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.",
        "dialog_output_dir_error_title": "–û—à–∏–±–∫–∞ –ø–∞–ø–∫–∏",
        "dialog_output_dir_error_message": "–ü–∞–ø–∫–∞ '{folder}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞: {error}",
        "dialog_report_title_success": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ",
        "dialog_report_title_errors": "–ó–∞–≤–µ—Ä—à–µ–Ω–æ —Å –æ—à–∏–±–∫–∞–º–∏",
        "dialog_report_errors_label": "–§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:",
        "dialog_button_ok": "OK",
        "profile_standard_name": "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π",
        "profile_standard_desc": "–£–¥–∞–ª—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é (EXIF –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é, –¥–∞–Ω–Ω—ã–µ –æ–± –∞–≤—Ç–æ—Ä–µ), —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å.",
        "profile_aggressive_name": "–ê–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–π",
        "profile_aggressive_desc": "–ü—ã—Ç–∞–µ—Ç—Å—è —É–¥–∞–ª–∏—Ç—å –º–∞–∫—Å–∏–º—É–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö, –≤–∫–ª—é—á–∞—è XMP, IPTC, –≤—Å–µ —á–∞–Ω–∫–∏ PNG. –ú–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Å–ø–µ—Ü–∏—Ñ–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ñ–∞–π–ª–æ–≤.",
        "profile_exif_only_name": "–¢–æ–ª—å–∫–æ EXIF (–¥–ª—è —Ñ–æ—Ç–æ)",
        "profile_exif_only_desc": "–£–¥–∞–ª—è–µ—Ç —Ç–æ–ª—å–∫–æ EXIF-–¥–∞–Ω–Ω—ã–µ –∏–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π, –æ—Å—Ç–∞–ª—å–Ω–æ–µ –Ω–µ —Ç—Ä–æ–≥–∞–µ—Ç.",
        "error_browse_files_title": "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤",
        "error_browse_files_message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥: {error}",
        "error_browse_output_dir_title": "–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏",
        "error_browse_output_dir_message": "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥: {error}",
        "icon_load_warning": "–§–∞–π–ª –∏–∫–æ–Ω–∫–∏ '{icon_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {icon_path}",
        "icon_tcl_error": "–û—à–∏–±–∫–∞ TclError –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–∫–æ–Ω–∫–∏ '{icon_name}': {error}",
        "icon_unknown_error": "–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–∫–æ–Ω–∫–∏: {error}",
        "theme_warning": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–º–µ–Ω–∏—Ç—å –ø—Ä–µ–¥–ø–æ—á—Ç–∏—Ç–µ–ª—å–Ω—É—é —Ç–µ–º—É ttk.",
        "app_run_log": "StealthShare {app_version} –∑–∞–ø—É—â–µ–Ω. –Ø–∑—ã–∫: {lang}. –¢–µ–º–∞: {theme}",
        "profile_change_log": "–í—ã–±—Ä–∞–Ω –ø—Ä–æ—Ñ–∏–ª—å –æ—á–∏—Å—Ç–∫–∏: {profile_name}",
        "files_added_log": "–î–æ–±–∞–≤–ª–µ–Ω–æ {new_files_count} –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤. –í—Å–µ–≥–æ: {total_count}",
        "list_cleared_log": "–°–ø–∏—Å–æ–∫ –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤ –æ—á–∏—â–µ–Ω.",
        "output_dir_selected_log": "–í—ã–±—Ä–∞–Ω–∞ –ø–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {folder}",
        "batch_start_log": "--- –ù–ê–ß–ê–õ–û –ü–ê–ö–ï–¢–ù–û–ô –û–ß–ò–°–¢–ö–ò ({count} —Ñ–∞–π–ª–æ–≤) ---",
        "file_skipped_not_found_log": "–§–∞–π–ª '{filename}' –ø—Ä–æ–ø—É—â–µ–Ω (–Ω–µ –Ω–∞–π–¥–µ–Ω).",
        "cleaned_name_error_log": "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è –¥–ª—è –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {filename}",
        "file_processed_success_log": "–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω: {filename_in} -> {filename_out}",
        "file_processed_error_log": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ: {filename}",
        "file_critical_error_log": "–ö—Ä–∏—Ç. –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ '{filename}': {error}",
        "batch_finish_log": "--- –ü–ê–ö–ï–¢–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê --- {summary}"

    },
    "en": {
        "app_title_suffix": "Metadata Cleaner",
        "author_credit": "Developed by IQUXAe",
        "status_ready": "Ready",
        "options_title": "Cleaning Settings",
        "profile_label": "Cleaning Profile:",
        "preserve_icc_label": "Preserve ICC Profile (for colors)",
        "sort_by_type_label": "Sort output into subfolders",
        "info_title": "Information",
        "supported_ext_label": "Supported Extensions:",
        "file_handling_title": "Files to Clean",
        "drop_target_label": "Add files using the button:", 
        "add_files_button": "Add Files...",
        "clear_list_button": "Clear List",
        "output_dir_label": "Save to:",
        "browse_button": "Browse...",
        "start_button": "üöÄ Start Cleaning",
        "processing_button": "‚è≥ Processing...",
        "status_files_added": "Added {count} file(s). Total in list: {total}.",
        "status_files_not_added": "No new files added (possibly already in list).",
        "status_list_cleared": "File list cleared.",
        "status_output_dir_selected": "Output folder selected: {folder}",
        "status_processing_start": "Started processing {count} file(s)...",
        "status_processing_file": "Processing ({current}/{total}): {filename}...",
        "status_completed_summary": "Processing complete. Successful: {success_count} of {total_files}.",
        "status_completed_with_errors": "Processing complete. Successful: {success_count} of {total_files}. Errors: {error_count}.",
        "status_no_files_to_process": "No files were selected for processing.",
        "dialog_no_files_title": "No Files Selected",
        "dialog_no_files_message": "Please add files to the list for cleaning.",
        "dialog_no_output_dir_title": "No Output Folder",
        "dialog_no_output_dir_message": "Please select an output folder.",
        "dialog_output_dir_error_title": "Folder Error",
        "dialog_output_dir_error_message": "Folder '{folder}' does not exist and cannot be created: {error}",
        "dialog_report_title_success": "Completed Successfully",
        "dialog_report_title_errors": "Completed with Errors",
        "dialog_report_errors_label": "Files with errors:",
        "dialog_button_ok": "OK",
        "profile_standard_name": "Standard",
        "profile_standard_desc": "Removes common private information (EXIF geolocation, author data), maintains compatibility.",
        "profile_aggressive_name": "Aggressive",
        "profile_aggressive_desc": "Attempts to remove maximum metadata, including XMP, IPTC, all PNG chunks. May affect some specific file functionalities.",
        "profile_exif_only_name": "EXIF Only (for photos)",
        "profile_exif_only_desc": "Removes only EXIF data from images, leaves other data untouched.",
        "error_browse_files_title": "File Selection Error",
        "error_browse_files_message": "Could not open file dialog: {error}",
        "error_browse_output_dir_title": "Folder Selection Error",
        "error_browse_output_dir_message": "Could not open folder dialog: {error}",
        "icon_load_warning": "Icon file '{icon_name}' not found at: {icon_path}",
        "icon_tcl_error": "TclError setting icon '{icon_name}': {error}",
        "icon_unknown_error": "Unexpected error setting icon: {error}",
        "theme_warning": "Could not apply preferred ttk theme.",
        "app_run_log": "StealthShare {app_version} started. Language: {lang}. Theme: {theme}",
        "profile_change_log": "Selected cleaning profile: {profile_name}",
        "files_added_log": "Added {new_files_count} new file(s). Total: {total_count}",
        "list_cleared_log": "Selected files list cleared.",
        "output_dir_selected_log": "Output folder selected: {folder}",
        "batch_start_log": "--- BATCH CLEANING STARTED ({count} files) ---",
        "file_skipped_not_found_log": "File '{filename}' skipped (not found).",
        "cleaned_name_error_log": "Could not generate cleaned filename for: {filename}",
        "file_processed_success_log": "Successfully processed: {filename_in} -> {filename_out}",
        "file_processed_error_log": "Error processing: {filename}",
        "file_critical_error_log": "Critical error cleaning '{filename}': {error}",
        "batch_finish_log": "--- BATCH CLEANING FINISHED --- {summary}"
    }
}

CIS_LANG_CODES_PREFIXES = ['ru', 'uk', 'be', 'kk', 'hy', 'az', 'ky', 'tg', 'uz', 'mo', 'tk', 'ka']

def get_system_language_code():
    try:
        lang_code, _ = locale.getdefaultlocale()
        if lang_code:
            return lang_code.split('_')[0].lower()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —è–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã: {e}")
    return None

def determine_initial_language(prompt_if_unknown=False):
    sys_lang = get_system_language_code()
    if sys_lang:
        if sys_lang in CIS_LANG_CODES_PREFIXES:
            return "ru"
        elif sys_lang == "en": 
            return "en"
        
        if prompt_if_unknown:
            logger.info(f"–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã '{sys_lang}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –æ–¥–Ω–æ–∑–Ω–∞—á–Ω–æ, –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
            return None 
        else:
            logger.info(f"–Ø–∑—ã–∫ —Å–∏—Å—Ç–µ–º—ã '{sys_lang}' –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–∞–∫ 'ru' –∏–ª–∏ 'en', –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è 'en'.")
            return "en" 
    
    return None if prompt_if_unknown else "en"

CLEANING_PROFILES = {
    "profile_standard": { 
        "options": {
            'images': {'exif': True, 'xmp_iptc': False, 'png_chunks': False}, 
            'pdf': {'info_dict': True, 'xmp': False},
            'office': {'core_properties': True, 'custom_properties': False}
        }
    },
    "profile_aggressive": {
        "options": {
            'images': {'exif': True, 'xmp_iptc': True, 'png_chunks': True},
            'pdf': {'info_dict': True, 'xmp': True},
            'office': {'core_properties': True, 'custom_properties': True} 
        }
    },
    "profile_exif_only": {
        "options": {
            'images': {'exif': True, 'xmp_iptc': False, 'png_chunks': False},
            'pdf': {'info_dict': False, 'xmp': False}, 
            'office': {'core_properties': False, 'custom_properties': False}
        }
    }
}

def get_profile_display_names(lang_strings):
    return {
        "profile_standard": lang_strings.get("profile_standard_name", "Standard"),
        "profile_aggressive": lang_strings.get("profile_aggressive_name", "Aggressive"),
        "profile_exif_only": lang_strings.get("profile_exif_only_name", "EXIF Only (Photos)")
    }

def get_profile_description(profile_key, lang_strings):
    desc_key_map = {
        "profile_standard": "profile_standard_desc",
        "profile_aggressive": "profile_aggressive_desc",
        "profile_exif_only": "profile_exif_only_desc"
    }
    return lang_strings.get(desc_key_map.get(profile_key, ""), "No description available.")

def get_file_category(file_extension):
    for category, extensions in FILE_CATEGORIES.items():
        if file_extension in extensions:
            return category
    return "Other_Files"

def get_cleaned_filename(original_filepath, output_dir, sort_into_subdirs=False, file_category=None):
    if not original_filepath or not isinstance(original_filepath, str):
        logger.error("–û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∏–ª–∏ –∏–º–µ–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø.")
        return None
    
    final_output_dir = output_dir
    if sort_into_subdirs and file_category:
        final_output_dir = os.path.join(output_dir, file_category)

    if not os.path.isdir(final_output_dir):
        try:
            os.makedirs(final_output_dir, exist_ok=True)
        except OSError as e:
            logger.error(f"–í—ã—Ö–æ–¥–Ω–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è '{final_output_dir}' –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω–∞: {e}")
            return None

    try:
        base_name = os.path.basename(original_filepath)
        name, ext = os.path.splitext(base_name)
        cleaned_name = f"{name}_cleaned{ext}"
        return os.path.join(final_output_dir, cleaned_name)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–º–µ–Ω–∏ –æ—á–∏—â–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –¥–ª—è '{original_filepath}': {e}")
        return None

def get_file_extension(filepath):
    if not filepath or not isinstance(filepath, str):
        return ""
    try:
        _, ext = os.path.splitext(filepath)
        return ext.lower()
    except Exception as e:
        logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ –¥–ª—è —Ñ–∞–π–ª–∞ '{filepath}': {e}")
        return ""

def get_supported_extensions_list():
    all_ext = []
    for cat_ext in FILE_CATEGORIES.values():
        all_ext.extend(cat_ext)
    return sorted(list(set(ext.lstrip('.') for ext in all_ext)))

def get_supported_extensions_string():
    return ", ".join(get_supported_extensions_list())

if __name__ == '__main__':
    if not logger.hasHandlers():
        logging.basicConfig(level=logging.DEBUG, format='%(asctime)s - %(levelname)s - %(module)s - %(message)s')
    
    logger.info("--- –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ utils.py (–º–Ω–æ–≥–æ—è–∑—ã—á–Ω–æ—Å—Ç—å) ---")
    
    initial_lang_ru = determine_initial_language() 
    logger.info(f"–û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–π —è–∑—ã–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é en, –µ—Å–ª–∏ –Ω–µ ru/cis): {initial_lang_ru}")
    
    ru_strings = LANGUAGES["ru"]
    en_strings = LANGUAGES["en"]

    logger.info(f"–ü—Ä–æ—Ñ–∏–ª–∏ RU: {list(get_profile_display_names(ru_strings).values())}")
    logger.info(f"–ü—Ä–æ—Ñ–∏–ª–∏ EN: {list(get_profile_display_names(en_strings).values())}")
    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π' RU: {get_profile_description('profile_standard', ru_strings)}")
    logger.info(f"–û–ø–∏—Å–∞–Ω–∏–µ 'Standard' EN: {get_profile_description('profile_standard', en_strings)}")
